package(default_visibility = ["//:__subpackages__"])

licenses(["notice"])

cc_library(
    name = "hybrid_config",
    srcs = ["hybrid_config.cc"],
    hdrs = ["hybrid_config.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        ":ecies_aead_hkdf_private_key_manager",
        ":ecies_aead_hkdf_public_key_manager",
        ":hybrid_decrypt_wrapper",
        ":hybrid_encrypt_wrapper",
        "//tink:registry",
        "//tink/aead:aead_config",
        "//tink/config:config_util",
        "//tink/config:tink_fips",
        "//proto:config_cc_proto",
        "//tink/util:status",
        "//tink/absl/base:core_headers",
        "//tink/absl/memory",
    ],
)

cc_library(
    name = "hpke_config",
    srcs = ["hpke_config.cc"],
    hdrs = ["hpke_config.h"],
    include_prefix = "tink/hybrid",
    tags = ["requires_boringcrypto_update"],
    visibility = ["//visibility:public"],
    deps = [
        ":hybrid_decrypt_wrapper",
        ":hybrid_encrypt_wrapper",
        "//tink:registry",
        "//tink/aead:aead_config",
        "//tink/config:tink_fips",
        "//tink/hybrid/internal:hpke_private_key_manager",
        "//tink/hybrid/internal:hpke_public_key_manager",
        "//tink/util:status",
    ],
)

cc_library(
    name = "hybrid_decrypt_wrapper",
    srcs = ["hybrid_decrypt_wrapper.cc"],
    hdrs = ["hybrid_decrypt_wrapper.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        "//tink:crypto_format",
        "//tink:hybrid_decrypt",
        "//tink:primitive_set",
        "//tink:primitive_wrapper",
        "//tink/internal:monitoring_util",
        "//tink/internal:registry_impl",
        "//tink/internal:util",
        "//tink/monitoring",
        "//proto:tink_cc_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/absl/status",
        "//tink/absl/strings",
    ],
)

cc_library(
    name = "hybrid_encrypt_wrapper",
    srcs = ["hybrid_encrypt_wrapper.cc"],
    hdrs = ["hybrid_encrypt_wrapper.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        "//tink:crypto_format",
        "//tink:hybrid_encrypt",
        "//tink:primitive_set",
        "//tink:primitive_wrapper",
        "//tink/internal:monitoring_util",
        "//tink/internal:registry_impl",
        "//tink/internal:util",
        "//tink/monitoring",
        "//proto:tink_cc_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/absl/status",
        "//tink/absl/strings",
    ],
)

cc_library(
    name = "hybrid_decrypt_factory",
    srcs = ["hybrid_decrypt_factory.cc"],
    hdrs = ["hybrid_decrypt_factory.h"],
    include_prefix = "tink/hybrid",
    deps = [
        ":hybrid_decrypt_wrapper",
        "//tink:hybrid_decrypt",
        "//tink:key_manager",
        "//tink:keyset_handle",
        "//tink:registry",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/absl/base:core_headers",
    ],
)

cc_library(
    name = "hybrid_encrypt_factory",
    srcs = ["hybrid_encrypt_factory.cc"],
    hdrs = ["hybrid_encrypt_factory.h"],
    include_prefix = "tink/hybrid",
    deps = [
        ":hybrid_encrypt_wrapper",
        "//tink:hybrid_encrypt",
        "//tink:key_manager",
        "//tink:keyset_handle",
        "//tink:registry",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/absl/base:core_headers",
    ],
)

cc_library(
    name = "hybrid_key_templates",
    srcs = ["hybrid_key_templates.cc"],
    hdrs = ["hybrid_key_templates.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        "//tink/aead:aead_key_templates",
        "//tink/daead:deterministic_aead_key_templates",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:hpke_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/absl/strings",
    ],
)

cc_library(
    name = "ecies_aead_hkdf_dem_helper",
    srcs = ["ecies_aead_hkdf_dem_helper.cc"],
    hdrs = ["ecies_aead_hkdf_dem_helper.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:private"],
    deps = [
        "//tink:aead",
        "//tink:deterministic_aead",
        "//tink/aead:aes_ctr_hmac_aead_key_manager",
        "//tink/daead/subtle:aead_or_daead",
        "//proto:aes_ctr_cc_proto",
        "//proto:aes_ctr_hmac_aead_cc_proto",
        "//proto:aes_gcm_cc_proto",
        "//proto:aes_siv_cc_proto",
        "//proto:common_cc_proto",
        "//proto:hmac_cc_proto",
        "//proto:tink_cc_proto",
        "//proto:xchacha20_poly1305_cc_proto",
        "//tink/subtle:aes_gcm_boringssl",
        "//tink/subtle:aes_siv_boringssl",
        "//tink/subtle:xchacha20_poly1305_boringssl",
        "//tink/util:errors",
        "//tink/util:protobuf_helper",
        "//tink/util:secret_data",
        "//tink/util:statusor",
        "//tink/absl/memory",
        "//tink/absl/status",
        "//tink/absl/status:statusor",
        "//tink/absl/strings",
    ],
)

cc_library(
    name = "ecies_aead_hkdf_hybrid_decrypt",
    srcs = ["ecies_aead_hkdf_hybrid_decrypt.cc"],
    hdrs = ["ecies_aead_hkdf_hybrid_decrypt.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:private"],
    deps = [
        ":ecies_aead_hkdf_dem_helper",
        "//tink:hybrid_decrypt",
        "//tink/internal:ec_util",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//tink/subtle:ecies_hkdf_recipient_kem_boringssl",
        "//tink/util:enums",
        "//tink/util:secret_data",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/absl/memory",
        "//tink/absl/status",
    ],
)

cc_library(
    name = "ecies_aead_hkdf_hybrid_encrypt",
    srcs = ["ecies_aead_hkdf_hybrid_encrypt.cc"],
    hdrs = ["ecies_aead_hkdf_hybrid_encrypt.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:private"],
    deps = [
        ":ecies_aead_hkdf_dem_helper",
        "//tink:aead",
        "//tink:hybrid_encrypt",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//tink/subtle:ecies_hkdf_sender_kem_boringssl",
        "//tink/util:enums",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/absl/memory",
        "//tink/absl/status",
        "//tink/absl/strings",
    ],
)

cc_library(
    name = "ecies_aead_hkdf_private_key_manager",
    srcs = ["ecies_aead_hkdf_private_key_manager.cc"],
    hdrs = ["ecies_aead_hkdf_private_key_manager.h"],
    include_prefix = "tink/hybrid",
    visibility = [
        "//:__subpackages__",
        "//objc:__subpackages__",
    ],
    deps = [
        ":ecies_aead_hkdf_hybrid_decrypt",
        ":ecies_aead_hkdf_public_key_manager",
        "//tink:core/key_type_manager",
        "//tink:core/private_key_type_manager",
        "//tink:hybrid_decrypt",
        "//tink:key_manager",
        "//tink/internal:ec_util",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/util:constants",
        "//tink/util:enums",
        "//tink/util:errors",
        "//tink/util:protobuf_helper",
        "//tink/util:secret_data",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:validation",
        "//tink/absl/memory",
        "//tink/absl/status",
        "//tink/absl/strings",
    ],
)

cc_library(
    name = "ecies_aead_hkdf_public_key_manager",
    srcs = ["ecies_aead_hkdf_public_key_manager.cc"],
    hdrs = ["ecies_aead_hkdf_public_key_manager.h"],
    include_prefix = "tink/hybrid",
    visibility = [
        "//:__subpackages__",
        "//objc:__subpackages__",
    ],
    deps = [
        ":ecies_aead_hkdf_hybrid_encrypt",
        "//tink:core/key_type_manager",
        "//tink:hybrid_encrypt",
        "//tink:key_manager",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/util:constants",
        "//tink/util:errors",
        "//tink/util:protobuf_helper",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:validation",
        "//tink/absl/memory",
        "//tink/absl/status",
        "//tink/absl/strings",
    ],
)

# tests

cc_test(
    name = "hybrid_config_test",
    size = "small",
    srcs = ["hybrid_config_test.cc"],
    tags = ["fips"],
    deps = [
        ":ecies_aead_hkdf_private_key_manager",
        ":ecies_aead_hkdf_public_key_manager",
        ":hybrid_config",
        ":hybrid_key_templates",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:keyset_handle",
        "//tink:registry",
        "//tink/internal:fips_utils",
        "//tink/util:status",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@boringssl//:crypto",
        "//tink/absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hpke_config_test",
    size = "small",
    srcs = ["hpke_config_test.cc"],
    tags = ["requires_boringcrypto_update"],
    deps = [
        ":hpke_config",
        ":hybrid_key_templates",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:keyset_handle",
        "//tink:registry",
        "//tink/config:tink_fips",
        "//tink/hybrid/internal:hpke_private_key_manager",
        "//tink/hybrid/internal:hpke_public_key_manager",
        "//tink/util:status",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "//tink/absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_decrypt_wrapper_test",
    size = "small",
    srcs = ["hybrid_decrypt_wrapper_test.cc"],
    deps = [
        ":failing_hybrid",
        ":hybrid_decrypt_wrapper",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:primitive_set",
        "//tink/internal:registry_impl",
        "//tink/monitoring",
        "//tink/monitoring:monitoring_client_mocks",
        "//proto:tink_cc_proto",
        "//tink/util:status",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "//tink/absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_encrypt_wrapper_test",
    size = "small",
    srcs = ["hybrid_encrypt_wrapper_test.cc"],
    deps = [
        ":failing_hybrid",
        ":hybrid_encrypt_wrapper",
        "//tink:hybrid_encrypt",
        "//tink:primitive_set",
        "//tink/internal:registry_impl",
        "//tink/monitoring",
        "//tink/monitoring:monitoring_client_mocks",
        "//proto:tink_cc_proto",
        "//tink/util:status",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "//tink/absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_decrypt_factory_test",
    size = "small",
    srcs = ["hybrid_decrypt_factory_test.cc"],
    deps = [
        ":ecies_aead_hkdf_public_key_manager",
        ":hybrid_config",
        ":hybrid_decrypt_factory",
        "//tink:crypto_format",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:keyset_handle",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/util:status",
        "//tink/util:test_keyset_handle",
        "//tink/util:test_util",
        "//tink/absl/memory",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_encrypt_factory_test",
    size = "small",
    srcs = ["hybrid_encrypt_factory_test.cc"],
    deps = [
        ":hybrid_config",
        ":hybrid_encrypt_factory",
        "//tink:crypto_format",
        "//tink:hybrid_encrypt",
        "//tink:keyset_handle",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/util:status",
        "//tink/util:test_keyset_handle",
        "//tink/util:test_util",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_key_templates_test",
    size = "small",
    srcs = ["hybrid_key_templates_test.cc"],
    deps = [
        ":ecies_aead_hkdf_private_key_manager",
        ":hybrid_config",
        ":hybrid_key_templates",
        "//tink/aead:aead_key_templates",
        "//tink/daead:deterministic_aead_key_templates",
        "//tink/hybrid/internal:hpke_private_key_manager",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:hpke_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/util:test_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_aead_hkdf_dem_helper_test",
    size = "small",
    srcs = ["ecies_aead_hkdf_dem_helper_test.cc"],
    deps = [
        ":ecies_aead_hkdf_dem_helper",
        "//tink/aead:aes_gcm_key_manager",
        "//tink/daead:aes_siv_key_manager",
        "//tink/util:secret_data",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "//tink/absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_aead_hkdf_hybrid_decrypt_test",
    size = "large",
    srcs = ["ecies_aead_hkdf_hybrid_decrypt_test.cc"],
    deps = [
        ":ecies_aead_hkdf_hybrid_decrypt",
        ":ecies_aead_hkdf_hybrid_encrypt",
        "//tink:hybrid_decrypt",
        "//tink/aead:aes_ctr_hmac_aead_key_manager",
        "//tink/aead:aes_gcm_key_manager",
        "//tink/aead:xchacha20_poly1305_key_manager",
        "//tink/daead:aes_siv_key_manager",
        "//tink/internal:ec_util",
        "//tink/internal:ssl_util",
        "//proto:aes_gcm_cc_proto",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//tink/subtle:random",
        "//tink/util:enums",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "//tink/absl/memory",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_aead_hkdf_hybrid_encrypt_test",
    size = "small",
    srcs = ["ecies_aead_hkdf_hybrid_encrypt_test.cc"],
    deps = [
        ":ecies_aead_hkdf_hybrid_encrypt",
        "//tink:hybrid_encrypt",
        "//tink/aead:aes_gcm_key_manager",
        "//tink/internal:ec_util",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//tink/util:enums",
        "//tink/util:statusor",
        "//tink/util:test_util",
        "//tink/absl/memory",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_aead_hkdf_private_key_manager_test",
    size = "small",
    srcs = ["ecies_aead_hkdf_private_key_manager_test.cc"],
    deps = [
        ":ecies_aead_hkdf_private_key_manager",
        ":ecies_aead_hkdf_public_key_manager",
        ":hybrid_key_templates",
        "//tink:hybrid_decrypt",
        "//tink:registry",
        "//tink/aead:aead_key_templates",
        "//tink/aead:aes_ctr_hmac_aead_key_manager",
        "//tink/aead:aes_gcm_key_manager",
        "//proto:aes_eax_cc_proto",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/subtle:hybrid_test_util",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "//tink/absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_aead_hkdf_public_key_manager_test",
    size = "small",
    srcs = ["ecies_aead_hkdf_public_key_manager_test.cc"],
    deps = [
        ":ecies_aead_hkdf_private_key_manager",
        ":ecies_aead_hkdf_public_key_manager",
        "//tink:hybrid_encrypt",
        "//tink:registry",
        "//tink/aead:aead_key_templates",
        "//tink/aead:aes_gcm_key_manager",
        "//proto:aes_eax_cc_proto",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "//tink/absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "failing_hybrid",
    srcs = ["failing_hybrid.cc"],
    hdrs = ["failing_hybrid.h"],
    include_prefix = "tink/hybrid",
    deps = [
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink/absl/strings",
    ],
)

cc_test(
    name = "failing_hybrid_test",
    srcs = ["failing_hybrid_test.cc"],
    deps = [
        ":failing_hybrid",
        "//tink/util:test_matchers",
        "//tink/absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)
